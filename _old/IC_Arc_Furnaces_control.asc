# Devices
alias d.furnace.1 d0
alias d.sorter.1 d1
alias d.furnace.2 d2
alias d.sorter.2 d3
alias d.furnace.3 d4
alias d.sorter.3 d5

# Registers
alias r.FurnaceIsActive r0
alias r.FurnaceImportSlot r1
alias r.SorterOutputValue r2
alias r.SorterImportSlot r3

# Constants
define TRUE 1
define FALSE 0
define EMPTY 0
define SORTER_WAITING -1
define SORTER_REJECT 1
define SORTER_ACCEPT 0
define SORTER_LOGIC_MODE 2
define PAUSE_AFTER_ACTIVATION 1 # in seconds

Init:
# Turn all sorter On
s d.sorter.1 On 1
s d.sorter.2 On 1
s d.sorter.3 On 1
# Turn all furnaces On
s d.furnace.1 On 1
s d.furnace.2 On 1
s d.furnace.3 On 1
# Set sorter mode to logic
s d.sorter.1 Mode SORTER_LOGIC_MODE
s d.sorter.2 Mode SORTER_LOGIC_MODE
s d.sorter.3 Mode SORTER_LOGIC_MODE
# Set all sorters Output to -1
s d.sorter.1 Output SORTER_WAITING
s d.sorter.2 Output SORTER_WAITING
s d.sorter.3 Output SORTER_WAITING

Loop:
# Furnace 1
alias d.Furnace d0
alias d.Sorter d1
jal ReadValues
jal ManageSorter
jal ManageFurnace
# Furnace 2
alias d.Furnace d2
alias d.Sorter d3
jal ReadValues
jal ManageSorter
jal ManageFurnace
# Furnace 3
alias d.Furnace d4
alias d.Sorter d5
jal ReadValues
jal ManageSorter
jal ManageFurnace
# Yield and restart
yield
j Loop

ReadValues:
l r.FurnaceIsActive d.Furnace Activate
ls r.FurnaceImportSlot d.Furnace 0 Occupied
l r.SorterOutputValue d.Sorter Output
ls r.SorterImportSlot d.Sorter 0 Occupied
j ra

ManageSorter:
# If sorter Output is not -1, abort
# (this ensures we don't jam it)
bne r.SorterOutputValue SORTER_WAITING ra
# If sorter Import slot is empty, return
beq r.SorterImportSlot EMPTY ra
# If furnace is active, reject 
breq r.FurnaceIsActive FALSE 2
s d.Sorter Output SORTER_ACCEPT
# If furnace is not active, set Output to 1 (accept)
breq r.FurnaceIsActive TRUE 2
s d.Sorter Output SORTER_REJECT
# Return
j ra

ManageFurnace:
# If furnace is active, return
beq r.FurnaceIsActive TRUE ra
# If furnace Inport slot is empty, return
beq r.FurnaceImportSlot EMPTY ra
# Activate furnace and wait for items to move inside chutes
s d.Furnace Activate TRUE
sleep PAUSE_AFTER_ACTIVATION
# Return
j ra
