alias d.sensor d0
alias d.gasInput d1
alias d.gasOutput d2
alias d.cooler d3
alias d.heater d4
alias d.purgeOverride d5

alias r.shouldAct r0
alias r.pressure r1
alias r.temperature r2
alias r.ratioPrimary r3
alias r.ratioPolutant r4
alias r.minTemperature r5
alias r.maxTemperature r6
alias r.forcePurge r7
​
add r.minTemperature 273.15 25
add r.maxTemperature 273.15 35
​
# Reset commands before start
# (this ensure to flush potential manual interractions)
s d.heater On 0
s d.cooler On 0
yield

start:​
# Read sensor values
l r.pressure d.sensor Pressure
l r.temperature d.sensor Temperature
l r.ratioPrimary d.sensor RatioCarbonDioxide
l r.ratioPolutant d.sensor RatioPollutant
l r.forcePurge d.purgeOverride Setting

command:
# If purgeOverride lever is active, branch to purge
beq r.forcePurge 1 purge

composition:
# Atmosphere composition regulation
# First check if the atmosphere needs to be purged, if any
# - Bypass checks if no atmosphere
beq r.pressure 0 temperature
# - if RatioPolutant > 5%
sgt r.shouldAct r.ratioPolutant 0.05
beq r.shouldAct 1 purge
# - if RatioOxygen < 50%
slt r.shouldAct r.ratioPrimary 0.5
beq r.shouldAct 1 purge

temperature:
# Temperatur regulation​
# Set heaters command to (current_temperature < min_temperature)
slt r.shouldAct r.temperature r.minTemperature
s d.heater On r.shouldAct​
​# Set coolers command to (current_temperature > max_temperature)
sgt r.shouldAct r.temperature r.maxTemperature
s d.cooler On r.shouldAct​

pressure:
# Pressure regulation​
# Set atmosphere input to (current_pressure < min_pressure​)
slt r.shouldAct r.pressure 80
s d.gasInput On r.shouldAct​
# Set atmosphere output to (current_pressure > max_pressure​)
sgt r.shouldAct r.pressure 120
s d.gasOutput On r.shouldAct​

loop:
# Sleep, then restart​
yield​
j start

purge:
# Activate atmosphere output and stop atmosphere input
s d.gasOutput On 1
s d.gasInput On 0
# Shut down heater and cooler too
s d.heater On 0
s d.cooler On 0
# Loop
j loop
